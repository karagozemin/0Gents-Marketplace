/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AgentNFTFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allAgents"
      | "createAgent"
      | "creationFee"
      | "creatorAgents"
      | "getAgentAt"
      | "getCreatorAgents"
      | "getTotalAgents"
      | "marketplace"
      | "owner"
      | "updateCreationFee"
      | "updateMarketplace"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AgentContractCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "allAgents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAgent",
    values: [string, string, string, string, string, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creatorAgents",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorAgents",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAgents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketplace",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateCreationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketplace",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "allAgents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorAgents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAgentAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorAgents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAgents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketplace",
    data: BytesLike
  ): Result;
}

export namespace AgentContractCreatedEvent {
  export type InputTuple = [
    agentContract: AddressLike,
    creator: AddressLike,
    agentName: string,
    price: BigNumberish
  ];
  export type OutputTuple = [
    agentContract: string,
    creator: string,
    agentName: string,
    price: bigint
  ];
  export interface OutputObject {
    agentContract: string;
    creator: string;
    agentName: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AgentNFTFactory extends BaseContract {
  connect(runner?: ContractRunner | null): AgentNFTFactory;
  waitForDeployment(): Promise<this>;

  interface: AgentNFTFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allAgents: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createAgent: TypedContractMethod<
    [
      agentName_: string,
      agentDescription_: string,
      agentCategory_: string,
      computeModel_: string,
      storageHash_: string,
      capabilities_: string[],
      price_: BigNumberish
    ],
    [string],
    "payable"
  >;

  creationFee: TypedContractMethod<[], [bigint], "view">;

  creatorAgents: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getAgentAt: TypedContractMethod<[index: BigNumberish], [string], "view">;

  getCreatorAgents: TypedContractMethod<
    [creator: AddressLike],
    [string[]],
    "view"
  >;

  getTotalAgents: TypedContractMethod<[], [bigint], "view">;

  marketplace: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  updateCreationFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMarketplace: TypedContractMethod<
    [newMarketplace: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allAgents"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createAgent"
  ): TypedContractMethod<
    [
      agentName_: string,
      agentDescription_: string,
      agentCategory_: string,
      computeModel_: string,
      storageHash_: string,
      capabilities_: string[],
      price_: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "creationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "creatorAgents"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAgentAt"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCreatorAgents"
  ): TypedContractMethod<[creator: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTotalAgents"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "marketplace"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateCreationFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMarketplace"
  ): TypedContractMethod<[newMarketplace: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AgentContractCreated"
  ): TypedContractEvent<
    AgentContractCreatedEvent.InputTuple,
    AgentContractCreatedEvent.OutputTuple,
    AgentContractCreatedEvent.OutputObject
  >;

  filters: {
    "AgentContractCreated(address,address,string,uint256)": TypedContractEvent<
      AgentContractCreatedEvent.InputTuple,
      AgentContractCreatedEvent.OutputTuple,
      AgentContractCreatedEvent.OutputObject
    >;
    AgentContractCreated: TypedContractEvent<
      AgentContractCreatedEvent.InputTuple,
      AgentContractCreatedEvent.OutputTuple,
      AgentContractCreatedEvent.OutputObject
    >;
  };
}
